!function(){"use strict";var e=class{constructor(e,t){var s,r;r=()=>this._inputEls.every((e=>e.validity.valid)),(s="_checkFormValidity")in this?Object.defineProperty(this,s,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[s]=r,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=document.querySelector(t),this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)]}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}toggleButtonState(){this._checkFormValidity()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class t{constructor(e,t){let{items:s,renderer:r}=e;this._renderer=r,this._container=document.querySelector(t),this._item=s}renderItems(){this._item.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class s{constructor(e){this._popupElement=document.querySelector(e),this._exitButton=this._popupElement.querySelector(".modal__exit-button"),this._handleEscUp=this._handleEscUp.bind(this)}_handleEscUp(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>this._closePopupWithOverlay(e))),this._exitButton.addEventListener("click",(()=>this.close()))}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscUp)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscUp)}_closePopupWithOverlay(e){e.target.classList.contains("modal_opened")&&this.close()}}class r extends s{constructor(e,t){super(e),this._handleSubmit=t,this._formEl=this._popupElement.querySelector(".modal__form"),this._saveButton=this._formEl.querySelector(".modal__form-button"),this._inputEls=Array.from(this._formEl.querySelectorAll(".modal__form-input"))}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}close(){this._formEl.reset(),super.close()}renderLoading(e){this._saveButton.textContent=e?"Saving...":"Save"}setEventListeners(){this._formEl.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())})),super.setEventListeners()}}function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}document.querySelector("#profileEdit"),document.querySelector("#cardAdd");const n=document.querySelector("#openModal"),o=document.querySelector("#openModal2"),a=document.querySelector(".profile__image-edit"),l=(document.querySelector("#profileExitBtn"),document.querySelector("#addExitBtn"),document.querySelector("#edit-form"),document.querySelector("#add-form"),document.querySelector("#nameInput")),d=document.querySelector("#jobInput"),h=document.querySelector(".profile__title"),c=document.querySelector(".profile__description"),u=document.querySelector(".profile__image"),_={inputSelector:".modal__form-input",submitButtonSelector:".modal__form-button",inactiveButtonClass:"modal__form-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"modal__error_visible"},m=new class{constructor(e){i(this,"getProfileData",(()=>fetch(`${this.url}/users/me`,{headers:this.headers}).then(this._checkServerResponse))),i(this,"updateProfileData",((e,t)=>fetch(`${this.url}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e,about:t})}).then(this._checkServerResponse))),i(this,"getInitialCards",(()=>fetch(`${this.url}/cards`,{headers:this.headers}).then(this._checkServerResponse))),i(this,"addNewCard",(e=>fetch(`${this.url}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkServerResponse))),this.url=e.baseUrl,this.headers=e.headers}_checkServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.statusText}`)}deleteCard(e){return fetch(`${this.url}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._checkServerResponse)}addLike(e){return fetch(`${this.url}/cards/likes/${e}`,{headers:this._headers,method:"PUT"}).then(this._checkServerResponse)}removeLike(e){return fetch(`${this.url}/cards/likes/${e}`,{headers:this._headers,method:"DELETE"}).then(this._checkServerResponse)}setUserAvatar(e){return fetch(`${this.url}/users/me/avatar/`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then(this._checkServerResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"7fc5c4b5-810f-422d-8040-d6c41ae3f41e","Content-Type":"application/json"}});let p,v;const E=new class extends s{constructor(e){super(e),this._saveButton=this._popupElement.querySelector(".modal__form-button"),this._saveButtonText=this._saveButton.textContent}open(e){super.open(),this._popupClick=e}renderLoading(e){this._saveButton.textContent=e?"Deleting...":"Yes"}setEventListeners(){this._saveButton.addEventListener("click",(e=>{e.preventDefault(),this._popupClick()})),super.setEventListeners()}}("#delete-card");E.setEventListeners();const k=e=>{const t=new class{constructor(e,t){let{data:s,handlePreview:r,handleDeleteClick:i,handleCardLike:n}=e;this._name=s.name,this._link=s.link,this._id=s._id,this._likes=s.likes,this._userId=s.userId,this._ownerId=s.owner._id,this._cardSelector=t,this._data=s,this._handlePreview=r,this._handleDeleteClick=i,this._handleCardLike=n}getId(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}handleDelete(){this._element.remove(),this._element=null}cardLiked(){return this._likes.some((e=>e._id===this._userId))}_renderLikes(){this._element.querySelector(".card__like-count").textContent=this._likes.length,this.cardLiked()?this._cardLikeButton.classList.add("card__like-button_on"):this._cardLikeButton.classList.remove("card__like-button_on")}updateLikes(e){this._likes=e,this._renderLikes()}_hideDeleteButton(){this._userId!==this._ownerId&&this._cardDeleteButton.remove()}_setEventListeners(){this._cardLikeButton.addEventListener("click",this._handleCardLike),this._cardDeleteButton.addEventListener("click",(e=>{e.stopPropagation(),this._handleDeleteClick(e)})),this._cardImage.addEventListener("click",(()=>this._handlePreview(this._data)))}generateCard(){return this._element=this._getTemplate(),this._cardLikeButton=this._element.querySelector(".card__like-button"),this._cardDeleteButton=this._element.querySelector(".card__delete-button"),this._cardImage=this._element.querySelector(".card__image"),this._cardTitle=this._element.querySelector(".card__title"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._hideDeleteButton(),this._renderLikes(),this._setEventListeners(),this._element}}({data:{...e,userId:p},handlePreview:e=>{L.open(e)},handleDeleteClick:()=>{E.open((()=>{E.renderLoading(!0),m.deleteCard(e._id).then((()=>{t.handleDelete(),E.close()})).catch((e=>console.log(`An error occurred when deleting card: ${e}`))).finally((()=>E.renderLoading(!1)))}))},handleCardLike:()=>{t.cardLiked()?m.removeLike(e._id).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`An error occurred when removing a like: ${e}`))):m.addLike(e._id).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`An error occurred when adding a like: ${e}`)))}},"#cardTemplate");return t.generateCard()},L=new class extends s{constructor(e){super(e),this._previewImage=this._popupElement.querySelector(".modal__preview-image"),this._previewTitle=this._popupElement.querySelector(".modal__preview-title")}open(e){this._previewImage.src=e.link,this._previewImage.alt=`A picture of ${e.name}`,this._previewTitle.textContent=e.name,super.open()}}("#image-preview");L.setEventListeners(),m.getInitialCards().then((e=>{v=new t({items:e,renderer:e=>{const t=k(e);v.addItems(t)}},".cards__list"),v.renderItems()}));const f=new r("#cardAdd",(e=>{const t={name:e.title,link:e.link};f.renderLoading(!0),m.addNewCard(t).then((e=>{const t=k(e);v.prependItem(t),f.close(),f.renderLoading(!1)}))}));f.setEventListeners(),o.addEventListener("click",(()=>{S.toggleButtonState(),f.open()}));const S=new e(_,"#add-form");S.enableValidation();const g=new class{constructor(e){let{nameElement:t,jobElement:s,avatar:r}=e;this._name=t,this._job=s,this._avatarElement=r}getUserInfo(){return{userName:this._name.textContent,userJob:this._job.textContent}}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.description}setUserAvatar(e){this._avatarElement.src=e}}({nameElement:h,jobElement:c,avatar:u}),y=new r("#profileEdit",(e=>{y.renderLoading(!0),m.updateProfileData(e.name,e.description).then((()=>{g.setUserInfo(e),y.close(),y.renderLoading(!1)}))}));y.setEventListeners(),n.addEventListener("click",(()=>{const{userName:e,userJob:t}=g.getUserInfo();l.value=e,d.value=t,y.open()})),new e(_,"#edit-form").enableValidation(),m.getProfileData().then((e=>{p=e._id,h.textContent=e.name,c.textContent=e.about,u.src=e.avatar}));const b=new r("#edit-avatar",(e=>{const t=e.avatar_link;b.renderLoading(!0),m.setUserAvatar(t).then((e=>{g.setUserAvatar(t),b.close(),b.renderLoading(!1)}))})),C=new e(_,"#edit-avatar-form");C.enableValidation(),a.addEventListener("click",(()=>{C.toggleButtonState(),b.open()})),b.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUExQixHQUhGLElBT0ZnSCxFQUFZbEksb0JBRVpvQixFQUFrQi9DLGlCQUFpQixTQUFTLEtBQzFDLE1BQU0sU0FBRXlKLEVBQUYsUUFBWUMsR0FBWVAsRUFBWUssY0FDMUN0RyxFQUFVUCxNQUFROEcsRUFDbEJ0RyxFQUFTUixNQUFRK0csRUFDakJHLEVBQVloSSxNQUFaLElBR3dCLElBQUlxSCxFQUM1QjNGLEVEM0ZhLGNDOEZHdEQsbUJBRWxCdUQsRUFBSXVHLGlCQUFpQm5HLE1BQU04RSxJQUN6QnZELEVBQVN1RCxFQUFPekMsSUFDaEI3QyxFQUFZOUQsWUFBY29KLEVBQU9oRyxLQUNqQ1csRUFBbUIvRCxZQUFjb0osRUFBTzVFLE1BQ3hDUixFQUFjd0UsSUFBTVksRUFBT3pELE1BQTNCLElBR0YsTUFBTStFLEVBQW1CLElBQUkvSCxFRG5HZCxnQkNtR29Ea0MsSUFDakUsTUFBTThGLEVBQWE5RixFQUFLK0YsWUFDeEJGLEVBQWlCbkgsZUFBYyxHQUMvQlcsRUFBSXdCLGNBQWNpRixHQUFZckcsTUFBTU8sSUFDbENnRixFQUFZbkUsY0FBY2lGLEdBQzFCRCxFQUFpQnRJLFFBQ2pCc0ksRUFBaUJuSCxlQUFjLEVBQS9CLEdBSEYsSUFPSXNILEVBQXNCLElBQUlqQixFQUM5QjNGLEVEN0dZLHFCQ2dIZDRHLEVBQW9CbEssbUJBQ3BCZ0QsRUFBaUJqRCxpQkFBaUIsU0FBUyxLQUN6Q21LLEVBQW9CeEssb0JBQ3BCcUssRUFBaUJuSSxNQUFqQixJQUdGbUksRUFBaUJySSxtQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9zZV9wcm9qZWN0X2Fyb3VuZHRoZXVzLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvdXRpbHMvQXBpLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cENvbmZpcm0uanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vc2VfcHJvamVjdF9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3NlX3Byb2plY3RfYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbCkge1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGNvbmZpZy5pbnB1dFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gY29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBjb25maWcuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xyXG5cclxuICAgIHRoaXMuX2Zvcm1FbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybUVsKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2lucHV0RWxzID0gWy4uLnRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXTtcclxuICB9XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsKSB7XHJcbiAgICBjb25zdCBlcnJvck1lc3NhZ2VFbCA9IHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IGlucHV0RWwudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWwuaWR9LWVycm9yYCk7XHJcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gXCJcIjtcclxuICAgIGVycm9yTWVzc2FnZUVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWwpIHtcclxuICAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2NoZWNrRm9ybVZhbGlkaXR5ID0gKCkgPT5cclxuICAgIHRoaXMuX2lucHV0RWxzLmV2ZXJ5KChpbnB1dCkgPT4gaW5wdXQudmFsaWRpdHkudmFsaWQpO1xyXG5cclxuICB0b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGNvbnN0IGlzRm9ybVZhbGlkID0gdGhpcy5fY2hlY2tGb3JtVmFsaWRpdHkoKTtcclxuXHJcbiAgICBpZiAoIWlzRm9ybVZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRFbHMuZm9yRWFjaCgoaW5wdXRFbCkgPT4ge1xyXG4gICAgICBpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWwpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWwuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBpdGVtcywgcmVuZGVyZXIgfSwgc2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2l0ZW0gPSBpdGVtcztcclxuICB9XHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9pdGVtLmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoZWxlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW1zKGl0ZW0pIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmQoaXRlbSk7XHJcbiAgfVxyXG5cclxuICBwcmVwZW5kSXRlbShpdGVtKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChpdGVtKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9leGl0QnV0dG9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2V4aXQtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5faGFuZGxlRXNjVXAgPSB0aGlzLl9oYW5kbGVFc2NVcC5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY1VwKGV2dCkge1xyXG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCAoZXZ0KSA9PlxyXG4gICAgICB0aGlzLl9jbG9zZVBvcHVwV2l0aE92ZXJsYXkoZXZ0KVxyXG4gICAgKTtcclxuICAgIHRoaXMuX2V4aXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMuY2xvc2UoKSk7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NVcCk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjVXApO1xyXG4gIH1cclxuXHJcbiAgX2Nsb3NlUG9wdXBXaXRoT3ZlcmxheShldnQpIHtcclxuICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX29wZW5lZFwiKSkge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0KSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICB0aGlzLl9mb3JtRWwgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuICAgIHRoaXMuX3NhdmVCdXR0b24gPSB0aGlzLl9mb3JtRWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybS1idXR0b25cIik7XHJcbiAgICB0aGlzLl9pbnB1dEVscyA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1FbC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19mb3JtLWlucHV0XCIpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2lucHV0RWxzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpbnB1dFZhbHVlcztcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fZm9ybUVsLnJlc2V0KCk7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTG9hZGluZyhpc0xvYWRpbmcpIHtcclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgdGhpcy5fc2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiU2F2aW5nLi4uXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9zYXZlQnV0dG9uLnRleHRDb250ZW50ID0gXCJTYXZlXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2Zvcm1FbC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgIH0pO1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuIiwiLy9wb3B1cHNcclxuY29uc3QgcHJvZmlsZUVkaXRQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZUVkaXRcIik7XHJcbmNvbnN0IGFkZENhcmRQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZEFkZFwiKTtcclxuXHJcbi8vYnV0dG9uc1xyXG5leHBvcnQgY29uc3QgZWRpdFByb2ZpbGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI29wZW5Nb2RhbFwiKTtcclxuZXhwb3J0IGNvbnN0IGFkZENhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI29wZW5Nb2RhbDJcIik7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZS1lZGl0XCIpO1xyXG5jb25zdCBwcm9maWxlQ2xvc2VCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGVFeGl0QnRuXCIpO1xyXG5jb25zdCBhZGRDbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkRXhpdEJ0blwiKTtcclxuXHJcbi8vZm9ybXMgYW5kIGlucHV0c1xyXG5jb25zdCBwcm9maWxlRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2VkaXQtZm9ybVwiKTtcclxuY29uc3QgYWRkRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1mb3JtXCIpO1xyXG5leHBvcnQgY29uc3QgbmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuYW1lSW5wdXRcIik7XHJcbmV4cG9ydCBjb25zdCBqb2JJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjam9iSW5wdXRcIik7XHJcblxyXG4vL3VzZXIgaW5mb1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3RpdGxlXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZURlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIi5wcm9maWxlX19kZXNjcmlwdGlvblwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlQXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZVwiKTtcclxuXHJcbi8vIC8vIGluaXRpYWwgZGF0YVxyXG4vLyBleHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4vLyAgIHtcclxuLy8gICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL3lvc2VtaXRlLmpwZ1wiLFxyXG4vLyAgIH0sXHJcbi8vICAge1xyXG4vLyAgICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxyXG4vLyAgICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS9sYWtlLWxvdWlzZS5qcGdcIixcclxuLy8gICB9LFxyXG4vLyAgIHtcclxuLy8gICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuLy8gICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbi8vICAgfSxcclxuLy8gICB7XHJcbi8vICAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuLy8gICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGF0ZW1hci5qcGdcIixcclxuLy8gICB9LFxyXG4vLyAgIHtcclxuLy8gICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL3Zhbm9pc2UuanBnXCIsXHJcbi8vICAgfSxcclxuLy8gICB7XHJcbi8vICAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL2xhZ28uanBnXCIsXHJcbi8vICAgfSxcclxuLy8gXTtcclxuXHJcbi8vc2VsZWN0b3JzXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RvcnMgPSB7XHJcbiAgcHJldmlld1BvcHVwOiBcIiNpbWFnZS1wcmV2aWV3XCIsXHJcbiAgY2FyZEFkZEZvcm06IFwiI2FkZC1mb3JtXCIsXHJcbiAgcHJvZmlsZVBvcHVwOiBcIiNwcm9maWxlRWRpdFwiLFxyXG4gIHByb2ZpbGVGb3JtOiBcIiNlZGl0LWZvcm1cIixcclxuICBjYXJkVGVtcGxhdGU6IFwiI2NhcmRUZW1wbGF0ZVwiLFxyXG4gIHVzZXJOYW1lU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3RpdGxlXCIsXHJcbiAgdXNlckpvYlNlbGVjdG9yOiBcIi5wcm9maWxlX19kZXNjcmlwdGlvblwiLFxyXG4gIGF2YXRhclBvcHVwOiBcIiNlZGl0LWF2YXRhclwiLFxyXG4gIGF2YXRhckZvcm06IFwiI2VkaXQtYXZhdGFyLWZvcm1cIixcclxuICBkZWxldGVQb3B1cDogXCIjZGVsZXRlLWNhcmRcIixcclxufTtcclxuXHJcbi8vdmFsaWRhdGlvbiBjb25maWdcclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRpb25Db25maWcgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2Zvcm0taW5wdXRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm0tYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fZm9ybS1idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXHJcbn07XHJcblxyXG4vLyBBcGkgY29uZmlnXHJcbmV4cG9ydCBjb25zdCBhcGlDb25maWcgPSB7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCI3ZmM1YzRiNS04MTBmLTQyMmQtODA0MC1kNmM0MWFlM2Y0MWVcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCBcIi4vaW5kZXguY3NzXCI7XHJcblxyXG4vL2ltcG9ydCBhbGwgY2xhc3Nlc1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBDb25maXJtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwQ29uZmlybS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vdXRpbHMvQXBpLmpzXCI7XHJcblxyXG4vL2ltcG9ydCBjb25zdGFudHNcclxuaW1wb3J0IHtcclxuICBzZWxlY3RvcnMsXHJcbiAgZWRpdFByb2ZpbGVCdXR0b24sXHJcbiAgYWRkQ2FyZEJ1dHRvbixcclxuICBwcm9maWxlTmFtZSxcclxuICBwcm9maWxlRGVzY3JpcHRpb24sXHJcbiAgdmFsaWRhdGlvbkNvbmZpZyxcclxuICBuYW1lSW5wdXQsXHJcbiAgam9iSW5wdXQsXHJcbiAgcHJvZmlsZUF2YXRhcixcclxuICBhdmF0YXJFZGl0QnV0dG9uLFxyXG4gIGFwaUNvbmZpZyxcclxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCI7XHJcblxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKGFwaUNvbmZpZyk7XHJcbmxldCB1c2VySWQ7XHJcbmxldCBjYXJkU2VjdGlvbjtcclxuXHJcbmNvbnN0IGRlbGV0ZUZvcm0gPSBuZXcgUG9wdXBDb25maXJtKHNlbGVjdG9ycy5kZWxldGVQb3B1cCk7XHJcbmRlbGV0ZUZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vY3JlYXRlIGluc3RhbmNlcyBvZiB0aGUgY2xhc3NlcyBhbmQgaW5pdC5cclxuY29uc3QgY3JlYXRlQ2FyZCA9IChkYXRhKSA9PiB7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxyXG4gICAge1xyXG4gICAgICBkYXRhOiB7IC4uLmRhdGEsIHVzZXJJZCB9LFxyXG4gICAgICBoYW5kbGVQcmV2aWV3OiAoaW1nRGF0YSkgPT4ge1xyXG4gICAgICAgIHByZXZpZXdQb3B1cC5vcGVuKGltZ0RhdGEpO1xyXG4gICAgICB9LFxyXG4gICAgICBoYW5kbGVEZWxldGVDbGljazogKCkgPT4ge1xyXG4gICAgICAgIGRlbGV0ZUZvcm0ub3BlbigoKSA9PiB7XHJcbiAgICAgICAgICBkZWxldGVGb3JtLnJlbmRlckxvYWRpbmcodHJ1ZSk7XHJcbiAgICAgICAgICBhcGlcclxuICAgICAgICAgICAgLmRlbGV0ZUNhcmQoZGF0YS5faWQpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICBjYXJkLmhhbmRsZURlbGV0ZSgpO1xyXG4gICAgICAgICAgICAgIGRlbGV0ZUZvcm0uY2xvc2UoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYEFuIGVycm9yIG9jY3VycmVkIHdoZW4gZGVsZXRpbmcgY2FyZDogJHtlcnJ9YClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiBkZWxldGVGb3JtLnJlbmRlckxvYWRpbmcoZmFsc2UpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgaGFuZGxlQ2FyZExpa2U6ICgpID0+IHtcclxuICAgICAgICBpZiAoY2FyZC5jYXJkTGlrZWQoKSkge1xyXG4gICAgICAgICAgYXBpXHJcbiAgICAgICAgICAgIC5yZW1vdmVMaWtlKGRhdGEuX2lkKVxyXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgY2FyZC51cGRhdGVMaWtlcyhyZXMubGlrZXMpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT5cclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiByZW1vdmluZyBhIGxpa2U6ICR7ZXJyfWApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFwaVxyXG4gICAgICAgICAgICAuYWRkTGlrZShkYXRhLl9pZClcclxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgIGNhcmQudXBkYXRlTGlrZXMocmVzLmxpa2VzKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYEFuIGVycm9yIG9jY3VycmVkIHdoZW4gYWRkaW5nIGEgbGlrZTogJHtlcnJ9YClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgc2VsZWN0b3JzLmNhcmRUZW1wbGF0ZVxyXG4gICk7XHJcbiAgcmV0dXJuIGNhcmQuZ2VuZXJhdGVDYXJkKCk7XHJcbn07XHJcblxyXG5jb25zdCBwcmV2aWV3UG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2Uoc2VsZWN0b3JzLnByZXZpZXdQb3B1cCk7XHJcbnByZXZpZXdQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuYXBpLmdldEluaXRpYWxDYXJkcygpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gIGNhcmRTZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAgICB7XHJcbiAgICAgIGl0ZW1zOiByZXN1bHQsXHJcbiAgICAgIHJlbmRlcmVyOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNhcmRFbCA9IGNyZWF0ZUNhcmQoZGF0YSk7XHJcbiAgICAgICAgY2FyZFNlY3Rpb24uYWRkSXRlbXMoY2FyZEVsKTtcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBcIi5jYXJkc19fbGlzdFwiXHJcbiAgKTtcclxuICBjYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG59KTtcclxuXHJcbmNvbnN0IGFkZEZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNjYXJkQWRkXCIsIChkYXRhKSA9PiB7XHJcbiAgY29uc3QgbmV3Q2FyZCA9IHsgbmFtZTogZGF0YS50aXRsZSwgbGluazogZGF0YS5saW5rIH07XHJcbiAgYWRkRm9ybS5yZW5kZXJMb2FkaW5nKHRydWUpO1xyXG4gIGFwaS5hZGROZXdDYXJkKG5ld0NhcmQpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgY29uc3QgbmV3Q2FyZEVsID0gY3JlYXRlQ2FyZChyZXN1bHQpO1xyXG4gICAgY2FyZFNlY3Rpb24ucHJlcGVuZEl0ZW0obmV3Q2FyZEVsKTtcclxuICAgIGFkZEZvcm0uY2xvc2UoKTtcclxuICAgIGFkZEZvcm0ucmVuZGVyTG9hZGluZyhmYWxzZSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5hZGRGb3JtLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhZGRGb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgYWRkRm9ybS5vcGVuKCk7XHJcbn0pO1xyXG5cclxuY29uc3QgYWRkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxyXG4gIHZhbGlkYXRpb25Db25maWcsXHJcbiAgc2VsZWN0b3JzLmNhcmRBZGRGb3JtXHJcbik7XHJcbmFkZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuY29uc3QgbmV3VXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xyXG4gIG5hbWVFbGVtZW50OiBwcm9maWxlTmFtZSxcclxuICBqb2JFbGVtZW50OiBwcm9maWxlRGVzY3JpcHRpb24sXHJcbiAgYXZhdGFyOiBwcm9maWxlQXZhdGFyLFxyXG59KTtcclxuXHJcbmNvbnN0IHByb2ZpbGVGb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oc2VsZWN0b3JzLnByb2ZpbGVQb3B1cCwgKGRhdGEpID0+IHtcclxuICBwcm9maWxlRm9ybS5yZW5kZXJMb2FkaW5nKHRydWUpO1xyXG4gIGFwaS51cGRhdGVQcm9maWxlRGF0YShkYXRhLm5hbWUsIGRhdGEuZGVzY3JpcHRpb24pLnRoZW4oKCkgPT4ge1xyXG4gICAgbmV3VXNlckluZm8uc2V0VXNlckluZm8oZGF0YSk7XHJcbiAgICBwcm9maWxlRm9ybS5jbG9zZSgpO1xyXG4gICAgcHJvZmlsZUZvcm0ucmVuZGVyTG9hZGluZyhmYWxzZSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxucHJvZmlsZUZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmVkaXRQcm9maWxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgY29uc3QgeyB1c2VyTmFtZSwgdXNlckpvYiB9ID0gbmV3VXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBuYW1lSW5wdXQudmFsdWUgPSB1c2VyTmFtZTtcclxuICBqb2JJbnB1dC52YWx1ZSA9IHVzZXJKb2I7XHJcbiAgcHJvZmlsZUZvcm0ub3BlbigpO1xyXG59KTtcclxuXHJcbmNvbnN0IGVkaXRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoXHJcbiAgdmFsaWRhdGlvbkNvbmZpZyxcclxuICBzZWxlY3RvcnMucHJvZmlsZUZvcm1cclxuKTtcclxuZWRpdEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuYXBpLmdldFByb2ZpbGVEYXRhKCkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgdXNlcklkID0gcmVzdWx0Ll9pZDtcclxuICBwcm9maWxlTmFtZS50ZXh0Q29udGVudCA9IHJlc3VsdC5uYW1lO1xyXG4gIHByb2ZpbGVEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IHJlc3VsdC5hYm91dDtcclxuICBwcm9maWxlQXZhdGFyLnNyYyA9IHJlc3VsdC5hdmF0YXI7XHJcbn0pO1xyXG5cclxuY29uc3QgdXBkYXRlQXZhdGFyRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKHNlbGVjdG9ycy5hdmF0YXJQb3B1cCwgKGRhdGEpID0+IHtcclxuICBjb25zdCBhdmF0YXJMaW5rID0gZGF0YS5hdmF0YXJfbGluaztcclxuICB1cGRhdGVBdmF0YXJGb3JtLnJlbmRlckxvYWRpbmcodHJ1ZSk7XHJcbiAgYXBpLnNldFVzZXJBdmF0YXIoYXZhdGFyTGluaykudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgbmV3VXNlckluZm8uc2V0VXNlckF2YXRhcihhdmF0YXJMaW5rKTtcclxuICAgIHVwZGF0ZUF2YXRhckZvcm0uY2xvc2UoKTtcclxuICAgIHVwZGF0ZUF2YXRhckZvcm0ucmVuZGVyTG9hZGluZyhmYWxzZSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuY29uc3QgYXZhdGFyRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxyXG4gIHZhbGlkYXRpb25Db25maWcsXHJcbiAgc2VsZWN0b3JzLmF2YXRhckZvcm1cclxuKTtcclxuYXZhdGFyRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmF2YXRhckVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhdmF0YXJGb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgdXBkYXRlQXZhdGFyRm9ybS5vcGVuKCk7XHJcbn0pO1xyXG5cclxudXBkYXRlQXZhdGFyRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG4iLCIvLyBUT0tFTiA9IFwiN2ZjNWM0YjUtODEwZi00MjJkLTgwNDAtZDZjNDFhZTNmNDFlXCI7IGdyb3VwLTEyXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG4gICAgdGhpcy51cmwgPSBjb25maWcuYmFzZVVybDtcclxuICAgIHRoaXMuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgX2NoZWNrU2VydmVyUmVzcG9uc2UocmVzKSB7XHJcbiAgICByZXR1cm4gcmVzLm9rID8gcmVzLmpzb24oKSA6IFByb21pc2UucmVqZWN0KGBFcnJvcjogJHtyZXMuc3RhdHVzVGV4dH1gKTtcclxuICB9XHJcblxyXG4gIGdldFByb2ZpbGVEYXRhID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1NlcnZlclJlc3BvbnNlKTtcclxuICB9O1xyXG5cclxuICB1cGRhdGVQcm9maWxlRGF0YSA9IChuYW1lLCBhYm91dCkgPT4ge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgYWJvdXQsXHJcbiAgICAgIH0pLFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1NlcnZlclJlc3BvbnNlKTtcclxuICB9O1xyXG5cclxuICBnZXRJbml0aWFsQ2FyZHMgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy51cmx9L2NhcmRzYCwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXHJcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrU2VydmVyUmVzcG9uc2UpO1xyXG4gIH07XHJcblxyXG4gIGFkZE5ld0NhcmQgPSAoZGF0YSkgPT4ge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMudXJsfS9jYXJkc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgICAgIGxpbms6IGRhdGEubGluayxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrU2VydmVyUmVzcG9uc2UpO1xyXG4gIH07XHJcblxyXG4gIGRlbGV0ZUNhcmQoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vY2FyZHMvJHtpZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5oZWFkZXJzLFxyXG4gICAgfSkudGhlbih0aGlzLl9jaGVja1NlcnZlclJlc3BvbnNlKTtcclxuICB9XHJcblxyXG4gIGFkZExpa2UoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vY2FyZHMvbGlrZXMvJHtpZH1gLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgIH0pLnRoZW4odGhpcy5fY2hlY2tTZXJ2ZXJSZXNwb25zZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVMaWtlKGlkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy51cmx9L2NhcmRzL2xpa2VzLyR7aWR9YCwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrU2VydmVyUmVzcG9uc2UpO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckF2YXRhcihhdmF0YXIpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLnVybH0vdXNlcnMvbWUvYXZhdGFyL2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGF2YXRhcixcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKHRoaXMuX2NoZWNrU2VydmVyUmVzcG9uc2UpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwQ29uZmlybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX3NhdmVCdXR0b24gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybS1idXR0b25cIik7XHJcbiAgICB0aGlzLl9zYXZlQnV0dG9uVGV4dCA9IHRoaXMuX3NhdmVCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICBvcGVuKHBvcHVwQ2xpY2spIHtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICAgIHRoaXMuX3BvcHVwQ2xpY2sgPSBwb3B1cENsaWNrO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTG9hZGluZyhpc0xvYWRpbmcpIHtcclxuICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgdGhpcy5fc2F2ZUJ1dHRvbi50ZXh0Q29udGVudCA9IFwiRGVsZXRpbmcuLi5cIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3NhdmVCdXR0b24udGV4dENvbnRlbnQgPSBcIlllc1wiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9zYXZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9wb3B1cENsaWNrKCk7XHJcbiAgICB9KTtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG59XHJcbiIsImNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgeyBkYXRhLCBoYW5kbGVQcmV2aWV3LCBoYW5kbGVEZWxldGVDbGljaywgaGFuZGxlQ2FyZExpa2UgfSxcclxuICAgIGNhcmRTZWxlY3RvclxyXG4gICkge1xyXG4gICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcblxyXG4gICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcclxuICAgIHRoaXMuX2xpa2VzID0gZGF0YS5saWtlcztcclxuICAgIHRoaXMuX3VzZXJJZCA9IGRhdGEudXNlcklkO1xyXG4gICAgdGhpcy5fb3duZXJJZCA9IGRhdGEub3duZXIuX2lkO1xyXG5cclxuICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcclxuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xyXG5cclxuICAgIHRoaXMuX2hhbmRsZVByZXZpZXcgPSBoYW5kbGVQcmV2aWV3O1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljaztcclxuICAgIHRoaXMuX2hhbmRsZUNhcmRMaWtlID0gaGFuZGxlQ2FyZExpa2U7XHJcbiAgfVxyXG5cclxuICBnZXRJZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pZDtcclxuICB9XHJcblxyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxyXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuICAgIHJldHVybiBjYXJkRWxlbWVudDtcclxuICB9XHJcblxyXG4gIGhhbmRsZURlbGV0ZSgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGNhcmRMaWtlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9saWtlcy5zb21lKChpdGVtKSA9PiBpdGVtLl9pZCA9PT0gdGhpcy5fdXNlcklkKTtcclxuICB9XHJcblxyXG4gIF9yZW5kZXJMaWtlcygpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWNvdW50XCIpLnRleHRDb250ZW50ID1cclxuICAgICAgdGhpcy5fbGlrZXMubGVuZ3RoO1xyXG4gICAgaWYgKHRoaXMuY2FyZExpa2VkKCkpIHtcclxuICAgICAgdGhpcy5fY2FyZExpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX29uXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fY2FyZExpa2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImNhcmRfX2xpa2UtYnV0dG9uX29uXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlTGlrZXMobGlrZXMpIHtcclxuICAgIHRoaXMuX2xpa2VzID0gbGlrZXM7XHJcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVEZWxldGVCdXR0b24oKSB7XHJcbiAgICBpZiAodGhpcy5fdXNlcklkICE9PSB0aGlzLl9vd25lcklkKSB7XHJcbiAgICAgIHRoaXMuX2NhcmREZWxldGVCdXR0b24ucmVtb3ZlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9jYXJkTGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5faGFuZGxlQ2FyZExpa2UpO1xyXG4gICAgdGhpcy5fY2FyZERlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKGV2dCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cclxuICAgICAgdGhpcy5faGFuZGxlUHJldmlldyh0aGlzLl9kYXRhKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlQ2FyZCgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG5cclxuICAgIHRoaXMuX2NhcmRMaWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fY2FyZERlbGV0ZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIuY2FyZF9fZGVsZXRlLWJ1dHRvblwiXHJcbiAgICApO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xyXG4gICAgdGhpcy5fY2FyZFRpdGxlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX3RpdGxlXCIpO1xyXG5cclxuICAgIHRoaXMuX2NhcmRJbWFnZS5zcmMgPSB0aGlzLl9saW5rO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9jYXJkVGl0bGUudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIHRoaXMuX2hpZGVEZWxldGVCdXR0b24oKTtcclxuICAgIHRoaXMuX3JlbmRlckxpa2VzKCk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYXJkO1xyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcHJldmlld0ltYWdlID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLm1vZGFsX19wcmV2aWV3LWltYWdlXCJcclxuICAgICk7XHJcbiAgICB0aGlzLl9wcmV2aWV3VGl0bGUgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIubW9kYWxfX3ByZXZpZXctdGl0bGVcIlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9wZW4oZGF0YSkge1xyXG4gICAgdGhpcy5fcHJldmlld0ltYWdlLnNyYyA9IGRhdGEubGluaztcclxuICAgIHRoaXMuX3ByZXZpZXdJbWFnZS5hbHQgPSBgQSBwaWN0dXJlIG9mICR7ZGF0YS5uYW1lfWA7XHJcbiAgICB0aGlzLl9wcmV2aWV3VGl0bGUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IG5hbWVFbGVtZW50LCBqb2JFbGVtZW50LCBhdmF0YXIgfSkge1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWVFbGVtZW50O1xyXG4gICAgdGhpcy5fam9iID0gam9iRWxlbWVudDtcclxuICAgIHRoaXMuX2F2YXRhckVsZW1lbnQgPSBhdmF0YXI7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHVzZXJOYW1lOiB0aGlzLl9uYW1lLnRleHRDb250ZW50LFxyXG4gICAgICB1c2VySm9iOiB0aGlzLl9qb2IudGV4dENvbnRlbnQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oZGF0YSkge1xyXG4gICAgdGhpcy5fbmFtZS50ZXh0Q29udGVudCA9IGRhdGEubmFtZTtcclxuICAgIHRoaXMuX2pvYi50ZXh0Q29udGVudCA9IGRhdGEuZGVzY3JpcHRpb247XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyQXZhdGFyKGF2YXRhcikge1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudC5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImZvcm1FbCIsInRoaXMiLCJfaW5wdXRFbHMiLCJldmVyeSIsImlucHV0IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9mb3JtRWwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uIiwicXVlcnlTZWxlY3RvckFsbCIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWwiLCJlcnJvck1lc3NhZ2VFbCIsImlkIiwiY2xhc3NMaXN0IiwiYWRkIiwidGV4dENvbnRlbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oaWRlSW5wdXRFcnJvciIsInJlbW92ZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ0b2dnbGVCdXR0b25TdGF0ZSIsIl9jaGVja0Zvcm1WYWxpZGl0eSIsImRpc2FibGVkIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbmFibGVWYWxpZGF0aW9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwiU2VjdGlvbiIsInNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJfaXRlbSIsInJlbmRlckl0ZW1zIiwiZWxlbSIsImFkZEl0ZW1zIiwiaXRlbSIsImFwcGVuZCIsInByZXBlbmRJdGVtIiwicHJlcGVuZCIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJfZXhpdEJ1dHRvbiIsIl9oYW5kbGVFc2NVcCIsImJpbmQiLCJldnQiLCJrZXkiLCJjbG9zZSIsInNldEV2ZW50TGlzdGVuZXJzIiwiX2Nsb3NlUG9wdXBXaXRoT3ZlcmxheSIsIm9wZW4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidGFyZ2V0IiwiY29udGFpbnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX2hhbmRsZVN1Ym1pdCIsIl9zYXZlQnV0dG9uIiwiQXJyYXkiLCJmcm9tIiwiX2dldElucHV0VmFsdWVzIiwiaW5wdXRWYWx1ZXMiLCJuYW1lIiwidmFsdWUiLCJyZXNldCIsInJlbmRlckxvYWRpbmciLCJpc0xvYWRpbmciLCJlZGl0UHJvZmlsZUJ1dHRvbiIsImFkZENhcmRCdXR0b24iLCJhdmF0YXJFZGl0QnV0dG9uIiwibmFtZUlucHV0Iiwiam9iSW5wdXQiLCJwcm9maWxlTmFtZSIsInByb2ZpbGVEZXNjcmlwdGlvbiIsInByb2ZpbGVBdmF0YXIiLCJ2YWxpZGF0aW9uQ29uZmlnIiwiYXBpIiwiZmV0Y2giLCJ1cmwiLCJoZWFkZXJzIiwidGhlbiIsIl9jaGVja1NlcnZlclJlc3BvbnNlIiwiYWJvdXQiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJsaW5rIiwiYmFzZVVybCIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXNUZXh0IiwiZGVsZXRlQ2FyZCIsImFkZExpa2UiLCJfaGVhZGVycyIsInJlbW92ZUxpa2UiLCJzZXRVc2VyQXZhdGFyIiwiYXZhdGFyIiwiYXV0aG9yaXphdGlvbiIsInVzZXJJZCIsImNhcmRTZWN0aW9uIiwiZGVsZXRlRm9ybSIsIl9zYXZlQnV0dG9uVGV4dCIsInBvcHVwQ2xpY2siLCJfcG9wdXBDbGljayIsImNyZWF0ZUNhcmQiLCJjYXJkIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlUHJldmlldyIsImhhbmRsZURlbGV0ZUNsaWNrIiwiaGFuZGxlQ2FyZExpa2UiLCJfbmFtZSIsIl9saW5rIiwiX2lkIiwiX2xpa2VzIiwibGlrZXMiLCJfdXNlcklkIiwiX293bmVySWQiLCJvd25lciIsIl9jYXJkU2VsZWN0b3IiLCJfZGF0YSIsIl9oYW5kbGVQcmV2aWV3IiwiX2hhbmRsZURlbGV0ZUNsaWNrIiwiX2hhbmRsZUNhcmRMaWtlIiwiZ2V0SWQiLCJfZ2V0VGVtcGxhdGUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiaGFuZGxlRGVsZXRlIiwiX2VsZW1lbnQiLCJjYXJkTGlrZWQiLCJzb21lIiwiX3JlbmRlckxpa2VzIiwibGVuZ3RoIiwiX2NhcmRMaWtlQnV0dG9uIiwidXBkYXRlTGlrZXMiLCJfaGlkZURlbGV0ZUJ1dHRvbiIsIl9jYXJkRGVsZXRlQnV0dG9uIiwic3RvcFByb3BhZ2F0aW9uIiwiX2NhcmRJbWFnZSIsImdlbmVyYXRlQ2FyZCIsIl9jYXJkVGl0bGUiLCJzcmMiLCJhbHQiLCJpbWdEYXRhIiwicHJldmlld1BvcHVwIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiZmluYWxseSIsIl9wcmV2aWV3SW1hZ2UiLCJfcHJldmlld1RpdGxlIiwiZ2V0SW5pdGlhbENhcmRzIiwicmVzdWx0IiwiY2FyZEVsIiwiYWRkRm9ybSIsIm5ld0NhcmQiLCJ0aXRsZSIsImFkZE5ld0NhcmQiLCJuZXdDYXJkRWwiLCJhZGRGb3JtVmFsaWRhdG9yIiwiRm9ybVZhbGlkYXRvciIsIm5ld1VzZXJJbmZvIiwibmFtZUVsZW1lbnQiLCJqb2JFbGVtZW50IiwiX2pvYiIsIl9hdmF0YXJFbGVtZW50IiwiZ2V0VXNlckluZm8iLCJ1c2VyTmFtZSIsInVzZXJKb2IiLCJzZXRVc2VySW5mbyIsImRlc2NyaXB0aW9uIiwicHJvZmlsZUZvcm0iLCJ1cGRhdGVQcm9maWxlRGF0YSIsImdldFByb2ZpbGVEYXRhIiwidXBkYXRlQXZhdGFyRm9ybSIsImF2YXRhckxpbmsiLCJhdmF0YXJfbGluayIsImF2YXRhckZvcm1WYWxpZGF0b3IiXSwic291cmNlUm9vdCI6IiJ9