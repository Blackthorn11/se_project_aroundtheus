!function(){"use strict";var e=class{constructor(e,t){var r,s;s=()=>this._inputEls.every((e=>e.validity.valid)),(r="_checkFormValidity")in this?Object.defineProperty(this,r,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[r]=s,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=document.querySelector(t),this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)]}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}toggleButtonState(){this._checkFormValidity()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class t{constructor(e,t){let{items:r,renderer:s}=e;this._renderer=s,this._container=document.querySelector(t),this._item=r}renderItems(){this._item.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}class r{constructor(e){this._popupElement=document.querySelector(e),this._exitButton=this._popupElement.querySelector(".modal__exit-button"),this._handleEscUp=this._handleEscUp.bind(this)}_handleEscUp(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>this._closePopupWithOverlay(e))),this._exitButton.addEventListener("click",(()=>this.close()))}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscUp)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscUp)}_closePopupWithOverlay(e){e.target.classList.contains("modal_opened")&&this.close()}}class s extends r{constructor(e,t){super(e),this._handleSubmit=t,this._formEl=this._popupElement.querySelector(".modal__form"),this._saveButton=this._formEl.querySelector(".modal__form-button"),this._inputEls=Array.from(this._formEl.querySelectorAll(".modal__form-input"))}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}close(){this._formEl.reset(),super.close()}renderLoading(e){this._saveButton.textContent=e?"Saving...":"Save"}setEventListeners(){this._formEl.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())})),super.setEventListeners()}}function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}document.querySelector("#profileEdit"),document.querySelector("#cardAdd");const i=document.querySelector("#openModal"),o=document.querySelector("#openModal2"),a=document.querySelector(".profile__image-edit"),l=(document.querySelector("#profileExitBtn"),document.querySelector("#addExitBtn"),document.querySelector("#edit-form"),document.querySelector("#add-form"),document.querySelector("#nameInput")),d=document.querySelector("#jobInput"),c=document.querySelector(".profile__title"),h=document.querySelector(".profile__description"),u=document.querySelector(".profile__image"),_={inputSelector:".modal__form-input",submitButtonSelector:".modal__form-button",inactiveButtonClass:"modal__form-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"modal__error_visible"},m=new class{constructor(e){n(this,"getInitialCards",(()=>fetch(`${this.url}/cards`,{headers:this.headers}).then(this._checkServerResponse))),n(this,"getProfileData",(()=>fetch(`${this.url}/users/me`,{headers:this.headers}).then(this._checkServerResponse))),n(this,"updateProfileData",((e,t)=>fetch(`${this.url}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e,about:t})}).then(this._checkServerResponse))),n(this,"addNewCard",(e=>fetch(`${this.url}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._checkServerResponse))),this.url=e.baseUrl,this.headers=e.headers}_checkServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.statusText}`)}getWebpageInfo(){return Promise.all([this.getInitialCards(),this.getProfileData()])}deleteCard(e){return fetch(`${this.url}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._checkServerResponse)}addLike(e){return fetch(`${this.url}/cards/likes/${e}`,{headers:this.headers,method:"PUT"}).then(this._checkServerResponse)}removeLike(e){return fetch(`${this.url}/cards/likes/${e}`,{headers:this.headers,method:"DELETE"}).then(this._checkServerResponse)}setUserAvatar(e){return fetch(`${this.url}/users/me/avatar/`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then(this._checkServerResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"7fc5c4b5-810f-422d-8040-d6c41ae3f41e","Content-Type":"application/json"}});let p,v;const E=new class extends r{constructor(e){super(e),this._saveButton=this._popupElement.querySelector(".modal__form-button"),this._saveButtonText=this._saveButton.textContent}open(e){super.open(),this._popupClick=e}renderLoading(e){this._saveButton.textContent=e?"Deleting...":this._saveButtonText}setEventListeners(){this._saveButton.addEventListener("click",(e=>{e.preventDefault(),this._popupClick()})),super.setEventListeners()}}("#delete-card");E.setEventListeners();const k=e=>{const t=new class{constructor(e,t){let{data:r,handlePreview:s,handleDeleteClick:n,handleCardLike:i}=e;this._name=r.name,this._link=r.link,this._id=r._id,this._likes=r.likes,this._userId=r.userId,this._ownerId=r.owner._id,this._cardSelector=t,this._data=r,this._handlePreview=s,this._handleDeleteClick=n,this._handleCardLike=i}getId(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}handleDelete(){this._element.remove(),this._element=null}cardLiked(){return this._likes.some((e=>e._id===this._userId))}_renderLikes(){this._likesCount.textContent=this._likes.length,this.cardLiked()?this._cardLikeButton.classList.add("card__like-button_on"):this._cardLikeButton.classList.remove("card__like-button_on")}updateLikes(e){this._likes=e,this._renderLikes()}_hideDeleteButton(){this._userId!==this._ownerId&&this._cardDeleteButton.remove()}_setEventListeners(){this._cardLikeButton.addEventListener("click",this._handleCardLike),this._cardDeleteButton.addEventListener("click",(e=>{e.stopPropagation(),this._handleDeleteClick(e)})),this._cardImage.addEventListener("click",(()=>this._handlePreview(this._data)))}generateCard(){return this._element=this._getTemplate(),this._likesCount=this._element.querySelector(".card__like-count"),this._cardLikeButton=this._element.querySelector(".card__like-button"),this._cardDeleteButton=this._element.querySelector(".card__delete-button"),this._cardImage=this._element.querySelector(".card__image"),this._cardTitle=this._element.querySelector(".card__title"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._hideDeleteButton(),this._renderLikes(),this._setEventListeners(),this._element}}({data:{...e,userId:p},handlePreview:e=>{f.open(e)},handleDeleteClick:()=>{E.open((()=>{E.renderLoading(!0),m.deleteCard(e._id).then((()=>{t.handleDelete(),E.close()})).catch((e=>console.log(`An error occurred when deleting card: ${e}`))).finally((()=>E.renderLoading(!1)))}))},handleCardLike:()=>{t.cardLiked()?m.removeLike(e._id).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`An error occurred when removing a like: ${e}`))):m.addLike(e._id).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`An error occurred when adding a like: ${e}`)))}},"#cardTemplate");return t.generateCard()},f=new class extends r{constructor(e){super(e),this._previewImage=this._popupElement.querySelector(".modal__preview-image"),this._previewTitle=this._popupElement.querySelector(".modal__preview-title")}open(e){this._previewImage.src=e.link,this._previewImage.alt=`A picture of ${e.name}`,this._previewTitle.textContent=e.name,super.open()}}("#image-preview");f.setEventListeners(),m.getWebpageInfo().then((e=>{let[r,s]=e;p=s._id,v=new t({items:r,renderer:e=>{const t=k(e);v.addItems(t)}},".cards__list"),v.renderItems(),S.setUserInfo({name:s.name,description:s.about}),S.setUserAvatar(s.avatar)})).catch((e=>console.log(`An error occurred when loading initial user and card data: ${e}`)));const g=new s("#cardAdd",(e=>{const t={name:e.title,link:e.link};g.renderLoading(!0),m.addNewCard(t).then((e=>{const t=k(e);v.prependItem(t),g.close()})).catch((e=>console.log(`An error occurred when loading new card data: ${e}`))).finally((()=>g.renderLoading(!1)))}));g.setEventListeners(),o.addEventListener("click",(()=>{L.toggleButtonState(),g.open()}));const L=new e(_,"#add-form");L.enableValidation();const S=new class{constructor(e){let{nameElement:t,jobElement:r,avatar:s}=e;this._name=t,this._job=r,this._avatarElement=s}getUserInfo(){return{userName:this._name.textContent,userJob:this._job.textContent}}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.description}setUserAvatar(e){this._avatarElement.src=e}}({nameElement:c,jobElement:h,avatar:u}),y=new s("#profileEdit",(e=>{y.renderLoading(!0),m.updateProfileData(e.name,e.description).then((()=>{S.setUserInfo(e),y.close()})).catch((e=>console.log(`An error occurred when loading user profile data: ${e}`))).finally((()=>y.renderLoading(!1)))}));y.setEventListeners(),i.addEventListener("click",(()=>{const{userName:e,userJob:t}=S.getUserInfo();l.value=e,d.value=t,y.open()})),new e(_,"#edit-form").enableValidation();const b=new s("#edit-avatar",(e=>{const t=e.avatar;b.renderLoading(!0),m.setUserAvatar(t).then((e=>{S.setUserAvatar(t),b.close()})).catch((e=>console.log(`An error occured when loading avatar data: ${e}`))).finally((()=>b.renderLoading(!1)))})),C=new e(_,"#edit-avatar-form");C.enableValidation(),a.addEventListener("click",(()=>{C.toggleButtonState(),b.open()})),b.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,